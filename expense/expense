#! /usr/bin/env ruby

require "pg"
require "io/console"


class ExpenseData
  def initialize
    @connection = PG.connect(dbname: "expenses")
  end

  def list_expenses
    if expenses_number > 0
      puts "There are #{expenses_number} expenses."
      result = @connection.exec("SELECT * FROM expenses ORDER BY created_on ASC")
      display_expenses(result)
    else
      puts "There are no expenses."
    end
  end

  def add_expenses(amount, memo)
    sql = "INSERT INTO expenses (amount, memo, created_on ) VALUES ($1, $2, now())"
    @connection.exec_params(sql, [amount, memo])
  end

  def search_expenses(criteria)
    sql = "SELECT * FROM expenses WHERE memo LIKE $1"
    result = @connection.exec_params(sql, ["%#{criteria}%"])
    display_expenses(result)
  end

  def delete_expense(id)
    sql = "SELECT * FROM expenses WHERE id = $1"
    result = @connection.exec_params(sql, [id])

    if result.ntuples == 1
      sql = "DELETE FROM expenses WHERE id = $1"
      @connection.exec_params(sql, [id])

      puts "The following expense has been deleted:"
      display_expenses(result)
    else
      puts "There is no expense with id '#{id}'."
    end
  end

  def delete_all_expenses
    @connection.exec("DELETE FROM expenses")
    puts "All expenses have been deleted."
  end

  private

  def display_expenses(expenses)
    expenses.each do |tuple|
      columns = [tuple["id"].rjust(3),
                 tuple["created_on"].rjust(10),
                 tuple["amount"].rjust(12),
                 tuple["memo"]
                ]
      puts columns.join(" | ")
    end
    puts "-" * 50
    puts "Total".rjust(3) + "#{total(expenses)}".rjust(26)
  end

  def expenses_number
    sql = @connection.exec("SELECT * FROM expenses")
    result = sql.ntuples
  end

  def total(result)
    result.field_values('amount').map(&:to_f).reduce(:+)
  end
end

class CLI
  def initialize
    @application = ExpenseData.new
  end

  def run(arguments)
    command = arguments.shift
    case command
    when "add"
      amount = arguments[0]
      memo = arguments[1]
      abort "You must provide an amount and memo." unless amount && memo
      @application.add_expenses(amount, memo)
    when "list"
      @application.list_expenses
    when "search"
      @application.search_expenses(arguments[0])
    when "delete"
      @application.delete_expense(arguments[0])
    when "clear"
      puts "This will remove all expenses. Are you sure? (y/n)"
      @application.delete_all_expenses if $stdin.getch == 'y'
    else
      print_help
    end
  end

  def print_help
    puts <<-HELP

    An expense recording system

    Commands:

    add AMOUNT MEMO[DATE] - record a new expense
    clear - delete all expenses
    list - list all expenses
    delete NUMBER - remove expense with id NUMBER
    search QUERY - list expenses with a matching memo field

    HELP
  end
end

CLI.new.run(ARGV)